package mathalt

import (
	"fmt"
	"math"
)

type entry struct {
	arg, want float64
}

// Reference tables printed via numpy. See reftable.py script next to these
// files.
var (
	refSin = []entry{
		{-1.5707963267948966, -1.0000000000000000},
		{-1.1780972450961724, -0.9238795325112867},
		{-0.7853981633974483, -0.7071067811865475},
		{-0.3926990816987241, -0.3826834323650898},
		{0.0000000000000000, 0.0000000000000000},
		{0.3926990816987241, 0.3826834323650898},
		{0.7853981633974483, 0.7071067811865475},
		{1.1780972450961724, 0.9238795325112867},
		{1.5707963267948966, 1.0000000000000000},
		{1.1631391187652618, 0.9180521638076899},
		{1.4241798848957483, 0.9892710496246157},
		{-1.1957550763274201, -0.9304925122075935},
		{-0.8841377592160081, -0.7733686514744063},
		{0.0116258464893433, 0.0116255845989505},
		{-1.2982580992455555, -0.9630907674188940},
		{0.8760930078932114, 0.7682436582429083},
		{1.0958561018790283, 0.8893200574785602},
		{-1.1409417229533199, -0.9090263514801161},
		{0.2419748075394046, 0.2396203672324879},
		{-0.6720153354048302, -0.6225643884308514},
		{-1.2184943426914576, -0.9385808793143084},
		{0.0475698891355461, 0.0475519502264479},
		{1.0373821250379316, 0.8610760522777925},
		{0.6528191758517843, 0.6074282980497632},
	}
	refCos = []entry{
		{-1.5707963267948966, 0.0000000000000001},
		{-1.1780972450961724, 0.3826834323650898},
		{-0.7853981633974483, 0.7071067811865476},
		{-0.3926990816987241, 0.9238795325112867},
		{0.0000000000000000, 1.0000000000000000},
		{0.3926990816987241, 0.9238795325112867},
		{0.7853981633974483, 0.7071067811865476},
		{1.1780972450961724, 0.3826834323650898},
		{1.5707963267948966, 0.0000000000000001},
		{1.1631391187652618, 0.3964596127325183},
		{1.4241798848957483, 0.1460917190487235},
		{-1.1957550763274201, 0.3663109126488062},
		{-0.8841377592160081, 0.6339565670585473},
		{0.0116258464893433, 0.9999324206078792},
		{-1.2982580992455555, 0.2691768446811238},
		{0.8760930078932114, 0.6401575443354187},
		{1.0958561018790283, 0.4572852888146854},
		{-1.1409417229533199, 0.4167386378952020},
		{0.2419748075394046, 0.9708666641755538},
		{-0.6720153354048302, 0.7825685799070392},
		{-1.2184943426914576, 0.3450593180680382},
		{0.0475698891355461, 0.9988687661698414},
		{1.0373821250379316, 0.5084761864568412},
		{0.6528191758517843, 0.7943745103717567},
	}
	refAsin = []entry{
		{0.8257366578545743, 0.9715069558959933},
		{0.3058372107164309, 0.3108176508297974},
		{0.5868987539091778, 0.6272231940743844},
		{0.6559734337670925, 0.7154715841244675},
		{0.3303461553080264, 0.3366702960208309},
		{0.8018690431757729, 0.9304167911715419},
		{0.1342060629826266, 0.1346122339292709},
		{0.4316766805471766, 0.4463507410771893},
		{0.7570863924387091, 0.8588417858343772},
		{0.4803885043622710, 0.5010976229400018},
		{0.7263847291470424, 0.8130470269416959},
		{0.9805847197831580, 1.3734213889134166},
		{0.3348104335984347, 0.3414040456651079},
		{0.3350956666354683, 0.3417067653616962},
		{0.4959981067744247, 0.5189839188312722},
		{0.2680144535895596, 0.2713314925000239},
		{0.8464659083616703, 1.0093123461637161},
		{0.8858221124120441, 1.0882627245667755},
		{0.9027719244741774, 1.1261710962578522},
		{0.4001219886990834, 0.4116499505167356},
	}
	refSqrt = []entry{
		{0.6587028313990854, 0.8116050957202556},
		{0.6394285385150210, 0.7996427568077016},
		{0.9099387223688884, 0.9539070826704708},
		{0.5994709426873445, 0.7742550888998693},
		{0.6475495472299926, 0.8047046335333186},
		{0.4732401084220416, 0.6879244932563759},
		{0.1054967087809499, 0.3248025689260322},
		{0.9365264686140918, 0.9677429765253230},
		{0.7782579279961580, 0.8821892812748056},
		{0.2537132174866612, 0.5036995309573568},
		{0.9113374310740314, 0.9546399483962692},
		{0.1505365491640086, 0.3879903982884224},
		{0.5403318080611316, 0.7350726549540063},
		{0.4077625011130428, 0.6385628403791148},
		{0.7779171807577306, 0.8819961342079288},
		{0.9370402735727158, 0.9680084057345348},
		{0.7746343818552135, 0.8801331614336625},
		{0.7404919920717400, 0.8605184437719741},
		{0.2424384301673397, 0.4923803714277608},
		{0.4741777523286932, 0.6886056580719426},
	}
)

func SinAlt(x float64) float64 {
	return x
}

func CosAlt(x float64) float64 {
	return x
}

func AsinAlt(x float64) float64 {
	return x
}

func TestFunctions() {
	funcs := []struct {
		name string
		fn   func(float64) float64
		ref  []entry
	}{
		{"SinAlt", SinAlt, refSin},
		{"CosAlt", CosAlt, refCos},
		{"AsinAlt", AsinAlt, refAsin},
		{"SqrtAlt", SqrtAlt, refSqrt},
		{"SinGo", math.Sin, refSin},
		{"CosGo", math.Cos, refCos},
		{"AsinGo", math.Asin, refAsin},
		{"SqrtGo", math.Sqrt, refSqrt},
	}

	for i, tt := range funcs {
		if i != 0 {
			fmt.Println()
		}
		fmt.Printf("=== %s ===\n", tt.name)
		for _, aa := range tt.ref {
			got := tt.fn(aa.arg)
			if !approxEqual(got, aa.want) {
				fmt.Printf("%s(%+.16f) = %+.16f [%+.16f]\n", tt.name, aa.arg, got, aa.want-got)
			}
		}
	}
}

func approxEqual(a, b float64) bool {
	return math.Abs(a-b) < 1e-8
}
